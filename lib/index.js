'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var cls = require('continuation-local-storage');
var clsBluebird = require('cls-bluebird');

var ns = cls.createNamespace('bookshelf-sessions');
var TRANSACTION_KEY = 'trx';

var getCurrentTransaction = function getCurrentTransaction() {
  return ns.get(TRANSACTION_KEY);
};

var isUnderTransaction = function isUnderTransaction() {
  return getCurrentTransaction() !== undefined;
};

var withTransaction = function withTransaction() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  if (isUnderTransaction()) {
    return _extends({
      transacting: getCurrentTransaction()
    }, options);
  }
  return options;
};

module.exports = function (bookshelf) {
  // Patch Bluebird to work correctly with cls
  clsBluebird(ns);

  bookshelf.Model = bookshelf.Model.extend({
    save: function save(key, val, options) {
      var save = bookshelf.Model.__super__.save;

      if (key === null || key === undefined || (typeof key === 'undefined' ? 'undefined' : _typeof(key)) === "object") {
        return save.call(this, key, withTransaction(val));
      }

      return save.call(this, key, val, withTransaction(options));
    },
    destroy: function destroy(options) {
      return bookshelf.Model.__super__.destroy.call(this, withTransaction(options));
    },
    fetch: function fetch(options) {
      return bookshelf.Model.__super__.fetch.call(this, withTransaction(options));
    },
    fetchAll: function fetchAll(options) {
      return bookshelf.Model.__super__.fetchAll.call(this, withTransaction(options));
    },
    load: function load(relations, options) {
      return bookshelf.Model.__super__.load.call(this, relations, withTransaction(options));
    }
  });

  bookshelf.Collection = bookshelf.Collection.extend({
    attach: function attach(ids, options) {
      return bookshelf.Collection.__super__.attach.call(this, ids, withTransaction(options));
    },
    detach: function detach(ids, options) {
      return bookshelf.Collection.__super__.detach.call(this, ids, withTransaction(options));
    },
    create: function create(model, options) {
      return bookshelf.Collection.__super__.create.call(this, model, withTransaction(options));
    },
    fetchOne: function fetchOne(options) {
      return bookshelf.Collection.__super__.fetchOne.call(this, withTransaction(options));
    },
    load: function load(relations, options) {
      return bookshelf.Collection.__super__.load.call(this, relations, withTransaction(options));
    },
    updatePivot: function updatePivot(attributes, options) {
      return bookshelf.Collection.__super__.updatePivot.call(this, attributes, withTransaction(options));
    }
  });

  bookshelf._originalTransaction = bookshelf.transaction;

  bookshelf.transaction = function (callback) {
    return this._originalTransaction(function (trx) {
      return ns.runAndReturn(function () {
        ns.set(TRANSACTION_KEY, trx);
        return callback(trx);
      });
    });
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,